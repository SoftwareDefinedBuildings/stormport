define STORM_HELP

 Storm specifics:

   Storm motes are programmed using StormLoader, which requires StormDrop binaries instead of
   hex files. These are automatically generated, but require some mandatory metadata, you can
   edit this in the .stormloader file in the root of the app, or you can type:

    make storm config

   For more detailed information see http://storm.pm/msg/ST-002

endef

HELP += $(STORM_HELP)

GCC = arm-none-eabi-gcc
OBJCOPY = arm-none-eabi-objcopy
OBJDUMP = arm-none-eabi-objdump
SIZE = arm-none-eabi-size
NM = arm-none-eabi-nm
SLOAD = sload
LIBS = -lm

SLOADER := $(shell which sload)
ifeq ("$(SLOADER)","")
	BUILD_DEPS += do_not_pack_sdb
else
	BUILD_DEPS += pack_sdb
endif

do_not_pack_sdb: FORCE
	@echo -e '$(WARN_STRING) Not packing SDB (stormloader not installed)'

SDB_MAINTAINER_DEF := $(shell whoami)
SDB_VERSION_DEF := 0.1
SDB_NAME_DEF := $(shell basename `pwd` | tr '[:upper:]' '[:lower:]')

SDB_DESCRIPTION_DEF := -

SDB_DEFAULT_WARNS := ""

ifeq ("$(SDB_MAINTAINER)","")
	SDB_DEFAULT_WARNS := "$(WARN_STRING) SDB_MAINTAINER not set, using '$(SDB_MAINTAINER_DEF)'\n"
	SDB_MAINTAINER = $(SDB_MAINTAINER_DEF)
endif
ifeq ("$(SDB_VERSION)","")
	SDB_DEFAULT_WARNS := $(SDB_DEFAULT_WARNS)"$(WARN_STRING) SDB_VERSION not set, using '$(SDB_VERSION_DEF)'\n"
	SDB_VERSION = $(SDB_VERSION_DEF)
endif
ifeq ("$(SDB_NAME)","")
	SDB_DEFAULT_WARNS := $(SDB_DEFAULT_WARNS)"$(WARN_STRING) SDB_NAME not set, using '$(SDB_NAME_DEF)'\n"
	SDB_NAME= $(SDB_NAME_DEF)
endif
ifeq ("$(SDB_DESCRIPTION)","")
	SDB_DEFAULT_WARNS := $(SDB_DEFAULT_WARNS)"$(WARN_STRING) SDB_DESCRIPTION not set, using '$(SDB_DESCRIPTION_DEF)'\n"
	SDB_DESCRIPTION= $(SDB_DESCRIPTION_DEF)
endif

SDB_PUBLISH_NAME ?= $(SDB_MAINTAINER):$(SDB_NAME)-$(SDB_VERSION)

pack_sdb: FORCE
ifeq ("$(SLOADER)","")
	@echo -e "$(ERROR_STRING) Aborting, stormloader not installed"
	exit 1
endif
	@echo -ne $(SDB_DEFAULT_WARNS)
	@sload pack -o $(TOSMAKE_BUILD_DIR)/main.sdb -m "$(SDB_MAINTAINER)" -v "$(SDB_VERSION)" -n "$(SDB_NAME)" -d "$(SDB_DESCRIPTION_DEF)" $(MAIN_EXE)
ifneq ("$(SDB_PUBLISH_KEY)","")
	@sload publish $(TOSMAKE_BUILD_DIR)/main.sdb $(SDB_PUBLISH_NAME) $(SDB_PUBLISH_KEY)
else
	@echo -e "$(WARN_STRING) SDB_PUBLISH_KEY not set, not publishing"
endif

program: pack_sdb FORCE
ifeq ("$(SLOADER)","")
	@echo -e "$(FAIL_STRING) Cannot program - stormloader is not installed"
else
	@echo -e "$(INFO_STRING) Flashing using stormloader"
	@sload flash $(TOSMAKE_BUILD_DIR)/main.sdb
endif

TOSMAKE_ADDITIONAL_INPUTS += $(TINYOS_OS_DIR)/platforms/$(PLATFORM)/stormcrt1.c

LINKERFILE ?= stormkernel.ld
LDFLAGS += -L$(TINYOS_OS_DIR)/platforms/$(PLATFORM) -T $(LINKERFILE)
LDFLAGS += -L$(TOSDIR)/chips/cortex/m4/cmsis/Lib/GCC/

INCLUDE_DIRS ?= $(TOSDIR)/platforms/$(PLATFORM)

CFLAGS += -mthumb -D__SAM4LC8C__ -D__ATSAM4LC8C__ -DARM_MATH_CM4=true  -fdata-sections
CFLAGS += -ffunction-sections -mlong-calls -g3 -mcpu=cortex-m4 -pipe -fno-strict-aliasing
CFLAGS += -std=gnu99 -ffunction-sections -fdata-sections --param max-inline-insns-single=500
